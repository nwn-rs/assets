//=============================================================================
//
// inc_framebuffer.shd
//
//=============================================================================

#ifndef INC_FRAMEBUFFER
#define INC_FRAMEBUFFER
#include "inc_common"
///////////////////////////////////
//
// BEGIN INC_FRAMEBUFFER
//
///////////////////////////////////

uniform sampler2D texFBColor; // Color framebuffer
uniform sampler2D texFBDepth; // Depth framebuffer

//Vertical field of view. 45 degrees.
#define fFOV 0.78539816

// This is the coefficient of distance between two adjacent pixels (assuming the same distance from view). 2 * tan(fFOV / 2) 
#define fPixelToDistanceCoeffModifier 0.828427

// This is the coefficient of distance from NDC (-1.0 to 1.0) to view. tan(fFOV / 2) 
#define fNDCToView 0.414214

vec3 DirectionProjectionToView(vec3 vDirection, vec2 vScreenCoords)
{
    vec2 vOffset = vec2((vScreenCoords.x-0.5)*fAspectRatio, (vScreenCoords.y-0.5));
	vDirection.xy = vDirection.xy - vDirection.z * vOffset * fPixelToDistanceCoeffModifier;	
    return vDirection;
}

vec3 DirectionViewToProjection(vec3 vDirection, vec2 vScreenCoords)
{
    vec2 vOffset = vec2((vScreenCoords.x-0.5)*fAspectRatio, (vScreenCoords.y-0.5));
	vDirection.xy = vDirection.xy + vDirection.z * vOffset * fPixelToDistanceCoeffModifier;	
    return vDirection;
}

vec3 VectorScaleViewToProjection(vec3 vVector, float fDepth)
{
	vVector/=fDepth;
	vVector*=1.0 / (1.0 - vVector.z);
	return vVector;
}

vec3 VectorScaleProjectionToView(vec3 vVector, float fDepth)
{
	vVector*=1.0 / (1.0 + vVector.z);
	vVector*=fDepth;
	return vVector;
}

float GetPerpendicularPixelDistance(float fDistance)
{
	return fDistance * vPixelSize.y * fPixelToDistanceCoeffModifier;
}

float GetDepth(vec2 vScreenCoords)
{
    return nearClip / (1.0 - texture2D(texFBDepth, vScreenCoords).x*fDepthToLinearModifier);
}

float GetViewZFromDepth(vec2 vScreenCoords)
{
    return -GetDepth(vScreenCoords);
}

vec3 GetViewPositionFromDepth(vec2 vScreenCoords, float fDepth)
{
	return vec3(vec2((vScreenCoords.x*2.0 - 1.0) * fAspectRatio, (vScreenCoords.y*2.0 - 1.0)) * fDepth * fNDCToView, -fDepth);
}
	
vec2 ViewVectorToProjectionOffset(vec3 vDirection, vec2 vCoords, float fDepth)
{
	vDirection = DirectionViewToProjection(vDirection, vCoords);
		
	vDirection = VectorScaleViewToProjection(vDirection, fDepth);
	
	vDirection.xy*= 10.0*vPixelSize / GetPerpendicularPixelDistance(fDepth);
	
    return vDirection.xy;
}

float GetDepthInverse(vec2 vCoords)
{
    return (1.0 - texture2D(texFBDepth, vCoords).x *fDepthToLinearModifier)/nearClip;
}

float GetInverseViewZFromDepth(vec2 vCoords)
{
    return -GetDepthInverse(vCoords);
}

vec3 GetNormalVector(vec2 vCoords)
{
    
    vec3 vNormal = vec3 (0.0, 0.0, 0.0);
    float fPixelDistance= GetViewZFromDepth(vCoords); 
    float fPerpendicularPixelDistance = GetPerpendicularPixelDistance(fPixelDistance);
    
    
    vec3 vSurfaceVectorH=vec3(0.0,0.0,0.0);
    vec3 vSurfaceVectorV=vec3(0.0,0.0,0.0);
    float fDistanceDelta = 0.0;
    for(int i = 0; i <2; i++)
    {
        vec2 vOffset = vec2 (0.0, 0.0);
        if( i == 0)
        {
            vOffset = vec2(vPixelSize.x, 0.0); 
        }
        else
        {
            vOffset = vec2(0.0, vPixelSize.y); 
        }
        float fNegPixelDistanceDelta = fPixelDistance - GetViewZFromDepth(vCoords - vOffset);
        float fPosPixelDistanceDelta = fPixelDistance - GetViewZFromDepth(vCoords + vOffset);
		
		
        if(abs(fNegPixelDistanceDelta)<abs(fPosPixelDistanceDelta))
        {
            //Negative pixel is closest.
            fDistanceDelta = -fNegPixelDistanceDelta;
        }
        else
        {
            fDistanceDelta = fPosPixelDistanceDelta;
             
        }
		
        if(i == 0)
        {
            vSurfaceVectorH=vec3(fPerpendicularPixelDistance,0.0,fDistanceDelta);
            vSurfaceVectorH=DirectionProjectionToView(vSurfaceVectorH, vCoords);
		}
        else
        {
            vSurfaceVectorV=vec3(0.0,fPerpendicularPixelDistance,fDistanceDelta);
            vSurfaceVectorV=DirectionProjectionToView(vSurfaceVectorV, vCoords);
         }
      
    }

    vNormal = cross(vSurfaceVectorH, vSurfaceVectorV);
    vNormal = normalize (vNormal);
    //vNormal.z = -vNormal.z;
    return vNormal;
}

vec3 GetPerspectiveNormalVector(vec2 vCoords)
{
    return DirectionViewToProjection(GetNormalVector(vCoords) / GetDepth(vCoords), vCoords);
}


///////////////////////////////////
//     
// END INC_FRAMEBUFFER
//
///////////////////////////////////

#endif 
