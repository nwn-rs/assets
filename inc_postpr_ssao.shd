//----------------------------------------
//Screen Space Ambient Radiosity, Highlight and Occlusion for NWN:EE
//
//----------------------------------------
//Description:
//
//Mimics the ambient light radiation and occlusion that would realistically affect the appearance of objects in a scene, adding to the sense of depth and detail.
//
//Setup:
//
//For increased fidelity at the cost of some performance, set nSSAOAngularFidelity to 2.
//
//You can also enable various debugging options (see comments below.)
//

#define FOG 1
#define POSTPROCESSING 1
#define SHADER_TYPE 2

#include "inc_random"
#include "inc_framebuffer"
#include "inc_lighting"
#include "inc_fog"
#include "inc_debug"

uniform float AOIntensity;

#define nSSAOAngularFidelity 8 // Number of angular iterations. Higher increase precision and smoothness at the expense of performance. (Default: 8)
#define fSSAOAngularFidelityInverse 0.125

// Note: these should be precalculated in the constants below.
#define nSSAORangeFidelity 6 // Number of iterations for range precision. (Default: 6)
#define fSSAOCutOffAngle 20.0 // Minimum angle for applying occlusion. This should be relatively low as it's faint at this point. (Default: 20.0)
#define fSSAOCutOffLimit 2.0 // If distance to delta depth gets above this ratio, we ignore the occluder, assuming it's an overlapping object.

#define fSSAOIntensity AOIntensity // Intensity of occlusion. General modifier. (Default: 0.5)
#define fSSAOOcclusionDarkness 0.15 // Amount of darkening to simulate occlusion. (Default 0.15)
#define fSSAORange 30.0 // Range of occlusion. Increasing it should be paired with an increase in range fidelity for the best result. (Default: 30.0)
#define fSSAONearClip 0.135 // Gradually fades out occlusion at this proximity. In place because SSAO never look very good up close (Default: 0.135)
#define fSSAOExposureHighlightIntensity 0.075 // How much high exposure to ambient light should increase brightness. (Default 0.075)
#define fSSAOOcclusionToHighlightRatio 4.0 // The ratio between highlight and occlusion when both are present at the same pixel. (Default 4.0)

#define fSSAOCutOffAngleModifier 0.36397023

#ifndef DEBUG_SSAO_VECTORS
	#define DEBUG_SSAO_VECTORS 0
#endif

struct SSAOInfo
{
	vec2 vCoords;
	vec3 vNormalThis;
	float fDepth;
	float fPerpendicularPixelDistance;
	float fAngleIterationSize;
	vec3 vOffset;
	vec3 vOcclusion;
	vec2 vOcclusionCoordsOffset;
	float fOffset1;
	float fOffset2;
	float fMaxRange;
	float fIterationRange;
    float fOcclusionTotal;
    float fExposureTotal;
	float fRangeToOpenEdge;
    float fRangeToClosedEdge;
	
	#if DEBUG_SSAO_VECTORS == 1
		vec4 DebugColor;
	#endif
};

struct SSAORangeProbeInfo
{
	vec2 vOcclusionCoords;
	float fIterationRangeThis;
	float fRange;
	bool bRangeExtend;
	float fOcclusionRange;
	float fOcclusionActualRange;
	float fOcclusionDelta;
};

void SSAOProbeRange(inout SSAORangeProbeInfo SSAORange, inout SSAOInfo SSAO)
{
	float fActualRange = SSAO.fPerpendicularPixelDistance * SSAORange.fRange;
	vec2 vOcclusionCoordsThis = SSAO.vCoords + SSAO.vOcclusionCoordsOffset * SSAORange.fRange;
	float fExpectedDepth = -SSAO.vOcclusion.z * fActualRange + SSAO.fDepth;

	float fDepthDelta = GetDepth(vOcclusionCoordsThis)-fExpectedDepth;

	float fTolerance = fActualRange + 2.0 * SSAO.fPerpendicularPixelDistance;
	
	if(abs(fDepthDelta)>fTolerance * fSSAOCutOffAngleModifier && fDepthDelta > -fTolerance * fSSAOCutOffLimit)
	{
		SSAORange.vOcclusionCoords = vOcclusionCoordsThis;
		SSAORange.fOcclusionDelta = fDepthDelta;
		SSAORange.fOcclusionRange = SSAORange.fRange;
		SSAORange.fOcclusionActualRange = fActualRange;
		//Stop extending.
		SSAORange.bRangeExtend=false;
		//Search closer.
		SSAORange.fIterationRangeThis=-SSAORange.fIterationRangeThis;
	}
	if(!SSAORange.bRangeExtend)
	{
		SSAORange.fIterationRangeThis*=0.5;
	}
	SSAORange.fRange+=SSAORange.fIterationRangeThis;
	SSAORange.fIterationRangeThis=abs(SSAORange.fIterationRangeThis);
}

void SSAOProbeAngle(int nAngularIteration, inout SSAOInfo SSAO)
{
	if(nAngularIteration == 4)
	{
		SSAO.vOffset = cos(SSAO.fAngleIterationSize) * SSAO.vOffset + sin(SSAO.fAngleIterationSize) * cross(SSAO.vOffset, SSAO.vNormalThis); //That's what math says! Rotate by fAngle around vNormalThis using Rodriguos' formula. As vOffset and vNormalThis are always perpendicular, we can shorten it.
		SSAO.vOcclusion = normalize(DirectionViewToProjection(SSAO.vOffset, SSAO.vCoords));
		SSAO.vOcclusionCoordsOffset = vPixelSize * SSAO.vOcclusion.xy;
	}
	else if(nAngularIteration == 0)
	{
		SSAO.vOffset = cross(vec3(SSAO.fOffset1, SSAO.fOffset2, 0.0), SSAO.vNormalThis);
		SSAO.vOcclusion = normalize(DirectionViewToProjection(SSAO.vOffset, SSAO.vCoords));
		SSAO.vOcclusionCoordsOffset = vPixelSize * SSAO.vOcclusion.xy;

	}
	else if(nAngularIteration == 2 || nAngularIteration == 6)
	{
		SSAO.vOffset = cross(SSAO.vNormalThis, SSAO.vOffset);
		SSAO.vOcclusion = normalize(DirectionViewToProjection(SSAO.vOffset, SSAO.vCoords));
		SSAO.vOcclusionCoordsOffset = vPixelSize * SSAO.vOcclusion.xy;

	}
	else //nAngularIteration 1 or 3
	{
		SSAO.vOcclusion = -SSAO.vOcclusion;
		SSAO.vOcclusionCoordsOffset = -SSAO.vOcclusionCoordsOffset;
	}

	////////// ITERATE RANGE //////////

	SSAORangeProbeInfo SSAORange;	
	
	
	SSAORange.vOcclusionCoords = SSAO.vCoords;
	SSAORange.fIterationRangeThis=SSAO.fIterationRange;
	SSAORange.fRange=SSAORange.fIterationRangeThis;
	SSAORange.bRangeExtend=true;
	SSAORange.fOcclusionRange = -1.0;
	SSAORange.fOcclusionActualRange = 0.0;
	SSAORange.fOcclusionDelta = 0.0;

	// Unroll up to 10.

	#if nSSAORangeFidelity > 0
	SSAOProbeRange(SSAORange, SSAO);
	#endif
	#if nSSAORangeFidelity > 1
	SSAOProbeRange(SSAORange, SSAO);
	#endif
	#if nSSAORangeFidelity > 2
	SSAOProbeRange(SSAORange, SSAO);
	#endif
	#if nSSAORangeFidelity > 3
	SSAOProbeRange(SSAORange, SSAO);
	#endif
	#if nSSAORangeFidelity > 4
	SSAOProbeRange(SSAORange, SSAO);
	#endif
	#if nSSAORangeFidelity > 5
	SSAOProbeRange(SSAORange, SSAO);
	#endif
	#if nSSAORangeFidelity > 6
	SSAOProbeRange(SSAORange, SSAO);
	#endif
	#if nSSAORangeFidelity > 7
	SSAOProbeRange(SSAORange, SSAO);
	#endif
	#if nSSAORangeFidelity > 8
	SSAOProbeRange(SSAORange, SSAO);
	#endif
	#if nSSAORangeFidelity > 9
	SSAOProbeRange(SSAORange, SSAO);
	#endif

	////////// EVALUATE DETECTED EDGE //////////
	

	if(SSAORange.fOcclusionRange!=-1.0)
	{
		 // Squaring is necessary to have the same total between vector pointing directly towards an edge and having two with an angle.
		float fOcclusion = 1.0 - 0.8 * SSAORange.fOcclusionRange/SSAO.fMaxRange;
		fOcclusion*=fOcclusion;

		#if DEBUG_SSAO_VECTORS == 1
		
			vec3 vOcclusionIdeal = SSAO.vOcclusion + DirectionViewToProjection(SSAO.vNormalThis, SSAORange.vOcclusionCoords);			
			#define OCCLUSION_IDEAL_SET
			
		#endif
		

		if (sign(SSAORange.fOcclusionDelta)==-1.0)
		{
			#ifndef OCCLUSION_IDEAL_SET
			vec3 vOcclusionIdeal = SSAO.vOcclusion + DirectionViewToProjection(SSAO.vNormalThis, SSAORange.vOcclusionCoords);
			#endif
		
			float fOcclusionRangeOffset = (SSAORange.fOcclusionRange + 3.0);
			float fIdealDelta = 1.0;

			float fDelta = (GetDepth(SSAO.vCoords + SSAO.vOcclusionCoordsOffset * fOcclusionRangeOffset) - SSAO.fDepth);
			fDelta -= fOcclusionRangeOffset * SSAO.fPerpendicularPixelDistance * (-vOcclusionIdeal.z);
			if(sign(fDelta)==-1.0)
			{
				fIdealDelta *= 1.0 - fDelta * (fOcclusionRangeOffset) * 0.5;
			} 

			//Compare with ideal corner of 45 degrees to soften lower angles.
			float fExpectedDepthDelta = -vOcclusionIdeal.z * SSAORange.fOcclusionActualRange + SSAO.fDepth;
			fDelta = GetDepth(SSAO.vCoords + vOcclusionIdeal.xy*vPixelSize* SSAORange.fOcclusionRange) - fExpectedDepthDelta;
			//Only deal with positive values (i.e. longer away than the ideal) as overlaps are better dealt with using the method above.
			if(sign(fDelta)==1.0)
			{
				fIdealDelta +=3.375 * fDelta / (SSAORange.fOcclusionActualRange);
			}
			fOcclusion*=1.0/(fIdealDelta);
			SSAO.fRangeToClosedEdge=min(SSAO.fRangeToClosedEdge, SSAORange.fOcclusionRange);
			SSAO.fOcclusionTotal+=fOcclusion;
		}
		else
		{
			SSAO.fRangeToOpenEdge=min(SSAO.fRangeToOpenEdge, SSAORange.fOcclusionRange);
			SSAO.fExposureTotal+=fOcclusion;
		} 
	
		#if DEBUG_SSAO_VECTORS == 1
			vec4 DrawColor = (SSAORange.fOcclusionDelta > 0 ? COLOR_GREEN : COLOR_RED);

			SSAO.DebugColor=DrawCrosshair(SSAO.DebugColor, SSAORange.vOcclusionCoords, 250.0 / SSAO.fDepth, DrawColor);
			DrawColor.a = 0.5;
			SSAO.DebugColor = DrawVector(SSAO.DebugColor, SSAO.vCoords, vPixelSize.y*SSAO.vOcclusion*abs(SSAORange.fOcclusionRange), DrawColor);	
			DrawColor.rgb = COLOR_BLUE.rgb;
			SSAO.DebugColor = DrawVector(SSAO.DebugColor, SSAO.vCoords, vPixelSize.y*vOcclusionIdeal*abs(SSAORange.fOcclusionRange), DrawColor);
            SSAO.DebugColor = DrawCrosshair(SSAO.DebugColor, SSAO.vCoords + vOcclusionIdeal.xy*vPixelSize* SSAORange.fOcclusionRange, 250.0  / SSAO.fDepth, DrawColor);

		#endif
	}
	#if DEBUG_SSAO_VECTORS == 1
	else
	{
		vec4 vDraw = vec4(normalize(SSAO.vOcclusion), 1.0);
		vDraw = vec4(vDraw.x*0.5 + 0.5, vDraw.y*0.5 + 0.5, vDraw.z*0.5 + 0.5, 0.75);
		SSAO.DebugColor = DrawVector(SSAO.DebugColor, SSAO.vCoords, vPixelSize.y*SSAO.vOcclusion*abs(SSAO.fMaxRange), vDraw);		
	}
	#endif


}

#if DEBUG_SSAO_VECTORS == 1
vec3 DrawSSAOVectors(vec3 Color, vec2 vCoords)
{

	SSAOInfo SSAO;

    SSAO.vCoords = vCoords;
    SSAO.fDepth = GetDepth(SSAO.vCoords);
 
	SSAO.DebugColor = COLOR_BLACK;
	SSAO.DebugColor.a = 0.0;
	
	
    if(SSAO.fDepth<=fSSAONearClip)
    {
        return Color;
    }

    SSAO.fPerpendicularPixelDistance = GetPerpendicularPixelDistance(SSAO.fDepth);

    SSAO.vNormalThis = GetNormalVector(SSAO.vCoords);
	
    SSAO.vOffset=vec3(0.0, 0.0, 0.0);
    SSAO.vOcclusion = vec3(0.0, 0.0, 0.0);
    SSAO.fAngleIterationSize = PI * 2.0 * fSSAOAngularFidelityInverse;
			
	SSAO.fOffset1 = 1.0;
	SSAO.fOffset2 = 0.0;				
	
	
    SSAO.fMaxRange = fSSAORange * (45.0 / SSAO.fDepth) * float(screenHeight) / 1080.0;
    SSAO.fIterationRange = SSAO.fMaxRange / float(nSSAORangeFidelity);

    SSAO.fOcclusionTotal=0.0;
    SSAO.fExposureTotal = 0.0;
    SSAO.fRangeToOpenEdge = SSAO.fMaxRange;
    SSAO.fRangeToClosedEdge = SSAO.fMaxRange;
    SSAO.vOcclusionCoordsOffset = vec2(0.0, 0.0);
	
    ////////// ITERATE ANGLES //////////

	#if nSSAOAngularFidelity > 0
	SSAOProbeAngle(0, SSAO);
	#endif
	#if nSSAOAngularFidelity > 1
	SSAOProbeAngle(1, SSAO);
	#endif
	#if nSSAOAngularFidelity > 2
	SSAOProbeAngle(2, SSAO);
	#endif
	#if nSSAOAngularFidelity > 3
	SSAOProbeAngle(3, SSAO);
	#endif
	#if nSSAOAngularFidelity > 4
	SSAOProbeAngle(4, SSAO);
	#endif
	#if nSSAOAngularFidelity > 5
	SSAOProbeAngle(5, SSAO);
	#endif
	#if nSSAOAngularFidelity > 6
	SSAOProbeAngle(6, SSAO);
	#endif
	#if nSSAOAngularFidelity > 7
	SSAOProbeAngle(7, SSAO);
	#endif

	Color = mix(Color, SSAO.DebugColor.rgb, SSAO.DebugColor.a);
    return Color;
}
#endif

float GetSSAOModifier()
{
	float fSSAOModifier = 1.0;
	vec3 ColorDebug = COLOR_WHITE.rgb;
	SSAOInfo SSAO;

    SSAO.vCoords = vVertexTexCoords;
    SSAO.fDepth = GetDepth(SSAO.vCoords);
	
    if(SSAO.fDepth<=fSSAONearClip)
    {
        return fSSAOModifier;
    }

    SSAO.fPerpendicularPixelDistance = GetPerpendicularPixelDistance(SSAO.fDepth);

    SSAO.vNormalThis = GetNormalVector(SSAO.vCoords);
	
    SSAO.vOffset=vec3(0.0, 0.0, 0.0);
    SSAO.vOcclusion = vec3(0.0, 0.0, 0.0);
    SSAO.fAngleIterationSize = PI * 2.0 * fSSAOAngularFidelityInverse;

	#if SHADER_QUALITY_MODE > 1
    float fRandom = InterleavedGradientNoise(SSAO.vCoords/vPixelSize);

    float fAngle=SSAO.fAngleIterationSize * fRandom;
    SSAO.fOffset1 = cos(fAngle);
    SSAO.fOffset2 = sqrt(1.0-SSAO.fOffset1*SSAO.fOffset1);
    #else
		if(abs(fract(gl_FragCoord.x * 0.5)-fract(gl_FragCoord.y * 0.5)) >= 0.25)
		{
			SSAO.fOffset1 = 1.0;
			SSAO.fOffset2 = 0.0;
		}
		else
		{
			SSAO.fOffset1 = 0.707;
			SSAO.fOffset2 = 0.707;
		}
    #endif
							
    SSAO.fMaxRange = fSSAORange * (45.0 / SSAO.fDepth) * float(screenHeight) / 1080.0;
    SSAO.fIterationRange = SSAO.fMaxRange / float(nSSAORangeFidelity);

    SSAO.fOcclusionTotal=0.0;
    SSAO.fExposureTotal = 0.0;
    SSAO.fRangeToOpenEdge = SSAO.fMaxRange;
    SSAO.fRangeToClosedEdge = SSAO.fMaxRange;
    SSAO.vOcclusionCoordsOffset = vec2(0.0, 0.0);
	
    ////////// ITERATE ANGLES //////////

	#if nSSAOAngularFidelity > 0
	SSAOProbeAngle(0, SSAO);
	#endif
	#if nSSAOAngularFidelity > 1
	SSAOProbeAngle(1, SSAO);
	#endif
	#if nSSAOAngularFidelity > 2
	SSAOProbeAngle(2, SSAO);
	#endif
	#if nSSAOAngularFidelity > 3
	SSAOProbeAngle(3, SSAO);
	#endif
	#if nSSAOAngularFidelity > 4
	SSAOProbeAngle(4, SSAO);
	#endif
	#if nSSAOAngularFidelity > 5
	SSAOProbeAngle(5, SSAO);
	#endif
	#if nSSAOAngularFidelity > 6
	SSAOProbeAngle(6, SSAO);
	#endif
	#if nSSAOAngularFidelity > 7
	SSAOProbeAngle(7, SSAO);
	#endif

    ////////// CALCULATE TOTALS AND APPLY //////////
    float fExposureOcclusionDelta = 0.0;
	if(max(SSAO.fExposureTotal, SSAO.fOcclusionTotal)>0.0)
    {
        SSAO.fExposureTotal *= fSSAOAngularFidelityInverse;
        SSAO.fExposureTotal += sqrt (SSAO.fExposureTotal); // Combine with linear.
		
		SSAO.fOcclusionTotal *=fSSAOAngularFidelityInverse;
        SSAO.fOcclusionTotal += sqrt (SSAO.fOcclusionTotal); // Combine with linear.
		
        fExposureOcclusionDelta=SSAO.fExposureTotal-SSAO.fOcclusionTotal * fSSAOOcclusionToHighlightRatio;

		fExposureOcclusionDelta = fExposureOcclusionDelta * min(1.0, (SSAO.fDepth-fSSAONearClip)*0.25);

		// Reduces occlusion when having both closed and open edge.
		// Disabled with the new renderer as it's mainly to overcome issues with decals.
		if(max(SSAO.fRangeToOpenEdge, SSAO.fRangeToClosedEdge)<SSAO.fMaxRange)
		{
			fExposureOcclusionDelta*=min(1.0, 2.0* (SSAO.fRangeToOpenEdge * SSAO.fRangeToClosedEdge)/SSAO.fMaxRange);

		}
			
		fExposureOcclusionDelta*=(sign(fExposureOcclusionDelta)==-1.0 ? fSSAOOcclusionDarkness : fSSAOExposureHighlightIntensity);
		
		fExposureOcclusionDelta*=fSSAOIntensity;

		fSSAOModifier *= max(1.0 + fExposureOcclusionDelta, 0.0);

		if(fogEnabled!=0.0)
		{
			float fFogModifier = clamp(GetFog(SSAO.fDepth), 0.0, 1.0);
			if(fFogModifier >= 0.99)
			{
				return 1.0;
			}
			fSSAOModifier = mix(fSSAOModifier, 1.0, fFogModifier);
		}
    }
    return fSSAOModifier;
}
