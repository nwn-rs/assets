//=============================================================================
//
// inc_common.shd
//
//=============================================================================

#ifndef INC_COMMON
#define INC_COMMON
#include "inc_config"
///////////////////////////////////
//
// BEGIN INC_COMMON
//
///////////////////////////////////

#define PI 3.14159265359

#define COLOR_BLACK vec4(0.0, 0.0, 0.0, 1.0)
#define COLOR_WHITE vec4(1.0, 1.0, 1.0, 1.0)
#define COLOR_GREY  vec4(0.5, 0.5, 0.5, 1.0)
#define COLOR_RED   vec4(1.0, 0.0, 0.0, 1.0)
#define COLOR_GREEN vec4(0.0, 1.0, 0.0, 1.0)
#define COLOR_BLUE  vec4(0.0, 0.0, 1.0, 1.0)
#define COLOR_MAGENTA  vec4(1.0, 0.0, 1.0, 1.0)
#define COLOR_YELLOW  vec4(1.0, 1.0, 0.0, 1.0)
#define COLOR_CYAN  vec4(0.0, 1.0, 1.0, 1.0)

#define SHADER_DEBUG_MODE_DISABLED                  0
#define SHADER_DEBUG_MODE_NORMALS                   1
#define SHADER_DEBUG_MODE_MATERIAL_BASE_TEXTURE     2
#define SHADER_DEBUG_MODE_MATERIAL_AMBIENT          3
#define SHADER_DEBUG_MODE_MATERIAL_DIFFUSE          4
#define SHADER_DEBUG_MODE_MATERIAL_EMISSIVE         5
#define SHADER_DEBUG_MODE_MATERIAL_SPECULARITY      6
#define SHADER_DEBUG_MODE_MATERIAL_ROUGHNESS        7
#define SHADER_DEBUG_MODE_MATERIAL_METALLICNESS     8
#define SHADER_DEBUG_MODE_MATERIAL_SPECULAR_COLOR   9
#define SHADER_DEBUG_MODE_MATERIAL_LIGHT_OCCLUSION  10
#define SHADER_DEBUG_MODE_LIGHT_TOTAL               11
#define SHADER_DEBUG_MODE_LIGHT_STATIC              12
#define SHADER_DEBUG_MODE_LIGHT_AMBIENT             13
#define SHADER_DEBUG_MODE_LIGHT_DIFFUSE             14
#define SHADER_DEBUG_MODE_LIGHT_SPECULAR            15
#define SHADER_DEBUG_MODE_VERTEX_NORMALS            16
#define SHADER_DEBUG_MODE_VERTEX_TANGENTS           17
#define SHADER_DEBUG_MODE_VERTEX_HANDEDNESS         18

#ifndef NO_TEXTURE_COORDS
	#define NO_TEXTURE_COORDS 0
#endif     

// Some compilers choke on checking against undefined values so in case any are missing, we make sure they are defined here.
   
#ifndef NO_TEXTURE
	#define NO_TEXTURE 0
#endif     
#ifndef NORMAL_MAP
	#define NORMAL_MAP 0
#endif     
#ifndef SPECULAR_MAP
	#define SPECULAR_MAP 0
#endif     
#ifndef ROUGHNESS_MAP
	#define ROUGHNESS_MAP 0
#endif     
#ifndef HEIGHT_MAP
	#define HEIGHT_MAP 0
#endif     
#ifndef SELF_ILLUMINATION_MAP
	#define SELF_ILLUMINATION_MAP 0
#endif
#ifndef ENVIRONMENT_MAP
	#define ENVIRONMENT_MAP 0
#endif     
#ifndef FOG
	#define FOG 0
#endif  
#ifndef LIGHTING
	#define LIGHTING 0
#endif
#ifndef POSTPROCESSING
	#define POSTPROCESSING 0
#endif  
#ifndef KEYHOLING
	#define KEYHOLING 0
#endif  
#ifndef POSITION_VIEW
	#define POSITION_VIEW 0
#endif
#ifndef POSITION_WORLD
	#define POSITION_WORLD 0
#endif
#ifndef VERTEX_NORMAL
	#define VERTEX_NORMAL 0
#endif
#ifndef FRAGMENT_NORMAL
	#define FRAGMENT_NORMAL 0
#endif
#ifndef VERTEX_COLOR
	#define VERTEX_COLOR 0 
#endif
#ifndef FORCE_VERTEX_LIGHTING
	#define FORCE_VERTEX_LIGHTING 0
#endif
#ifndef NO_DISCARD
	#define NO_DISCARD 0 
#endif
#ifndef FORCE_ALLOW_DISCARD
	#define FORCE_ALLOW_DISCARD 0
#endif

//#undef NO_DISCARD
//#define NO_DISCARD 0

// Apply configurations

// If set, this suppresses all "discard" calls. The reason that we need to
// handle it in this way is because the pressence of discard, even if gated
// behind a uniform, will always cause the Early-Z optimization to be dropped.
// This value is set to enabled by default, but disabled when rendering content 
// with keyholing as well as alpha testing.
#if NO_DISCARD == 1 && FORCE_ALLOW_DISCARD != 1
	#define discard
#endif

#if VERTEX_NORMAL == 1
	#undef POSITION_VIEW
	#define POSITION_VIEW 1
#endif

#if NORMAL_MAP == 1
	#undef FRAGMENT_NORMAL
	#define FRAGMENT_NORMAL 1
#endif

#if KEYHOLING_ENABLED == 0
	#undef KEYHOLING
	#define KEYHOLING 0
#endif

#if FORCE_VERTEX_LIGHTING == 1
	#undef FRAGMENT_LIGHTING
	#define FRAGMENT_LIGHTING 0
#endif

#if LIGHTING == 1 && (FRAGMENT_LIGHTING == 1 || FRAGMENT_NORMAL == 1 ) && POSTPROCESSING != 1
	#define SPECULAR_LIGHT 1
#else
	#define SPECULAR_LIGHT 0
#endif

// Screen pixel coordinates of the mouse
uniform highp ivec2 userinputMousePosition;

uniform highp vec2 screenParams;
#define screenWidth (screenParams.x)
#define screenHeight (screenParams.y)

uniform highp vec3 pixelParams;
#define vPixelSize (pixelParams.xy)
#define invScreenWidth (pixelParams.x)
#define invScreenHeight (pixelParams.y)
#define fAspectRatio (pixelParams.z)

uniform highp vec3 clipParams;
#define nearClip (clipParams.x)
#define farClip (clipParams.y)
#define fDepthToLinearModifier (clipParams.z) // This is (1-near / far)

uniform highp mat4 m_proj;
uniform highp mat4 m_proj_inv;
uniform highp mat4 m_vp_inv;
uniform highp mat4 m_view_inv;
uniform highp mat4 m_view;

#if POSTPROCESSING == 0

	#if FOG == 1 || KEYHOLING == 1 || HEIGHT_MAP == 1 || ENVIRONMENT_MAP == 1 || LIGHTING == 1
		#undef POSITION_VIEW
		#define POSITION_VIEW 1
		#undef VERTEX_NORMAL
		#define VERTEX_NORMAL 1
	#endif

	#if NO_TEXTURE_COORDS != 1 && NO_TEXTURE != 1
	uniform highp mat4 m_texture;        
	#endif

	
	#if VERTEX_COLOR == 1 || (LIGHTING == 1 && FRAGMENT_LIGHTING != 1 && NORMAL_MAP != 1)
		
		varying vec4 VertexColor;
		
	#endif
	

	#if POSITION_VIEW == 1

		uniform highp mat4 m_mv;
		varying highp vec3 vPosView;

	#else

		uniform highp mat4 m_mvp;

	#endif

	#if VERTEX_NORMAL == 1
		varying vec3 vVertexNormal;
	#endif
		
	#if POSITION_WORLD == 1

		varying highp vec3 vPosWorld;

	#endif
	
	#if NO_TEXTURE != 1   
     

	uniform lowp int texture0Bound;
	uniform sampler2D texUnit0;    
	
	#if NORMAL_MAP == 1
		uniform lowp int texture1Bound;  
		uniform sampler2D texUnit1;   
	#endif
	#if SPECULAR_MAP == 1
		uniform lowp int texture2Bound;  
		uniform sampler2D texUnit2;
	#endif
	#if ROUGHNESS_MAP == 1
		uniform lowp int texture3Bound;  
		uniform sampler2D texUnit3;   
	#endif
	#if HEIGHT_MAP == 1
		uniform lowp int texture4Bound;  
		uniform sampler2D texUnit4;   
	#endif
	#if SELF_ILLUMINATION_MAP == 1
		uniform lowp int texture5Bound;  
		uniform sampler2D texUnit5;   
	#endif

	#endif

#endif   

#if NO_TEXTURE != 1
			
	varying vec2 vVertexTexCoords;
	
#endif

#ifndef SHADER_TYPE
	#define SHADER_TYPE 2
#endif     

#if SHADER_TYPE == 1

	attribute vec4 vPos;

	#if NO_TEXTURE_COORDS != 1 && NO_TEXTURE != 1
        
		attribute vec2 vTcIn;
    
	#endif
			
	#if POSTPROCESSING == 0

		#if VERTEX_NORMAL == 1
		
			attribute vec3 vNormal;
		
		#endif
			
		#if VERTEX_COLOR == 1 || (LIGHTING == 1 && FRAGMENT_LIGHTING != 1)
		
			attribute vec4 vColor;

		#endif
	
	#endif

#elif SHADER_TYPE == 2

	vec4 FragmentColor;

	#if POSTPROCESSING == 0

		vec3 vSurfaceNormal;
		vec3 vFragmentNormal;

		#if NO_TEXTURE != 1
			vec2 vTexCoords;
		#endif
		
	#endif

#endif


#if POSITION_VIEW == 1
vec3 vViewToSurface_n;

void SetupViewToSurfaceNormal()
{
	vViewToSurface_n = normalize(vPosView.xyz);
}
#endif

float sqr(float fA)
{
	return fA * fA;
}

#ifdef MOBILE
highp mat4 transpose(in highp mat4 inMatrix) 
{
    highp vec4 i0 = inMatrix[0];
    highp vec4 i1 = inMatrix[1];
    highp vec4 i2 = inMatrix[2];
    highp vec4 i3 = inMatrix[3];

    highp mat4 outMatrix = mat4(
                 vec4(i0.x, i1.x, i2.x, i3.x),
                 vec4(i0.y, i1.y, i2.y, i3.y),
                 vec4(i0.z, i1.z, i2.z, i3.z),
                 vec4(i0.w, i1.w, i2.w, i3.w)
                 );

    return outMatrix;
}

highp mat3 transpose(in highp mat3 inMatrix) 
{
    highp vec3 i0 = inMatrix[0];
    highp vec3 i1 = inMatrix[1];
    highp vec3 i2 = inMatrix[2];

    highp mat3 outMatrix = mat3(
                 vec3(i0.x, i1.x, i2.x),
                 vec3(i0.y, i1.y, i2.y),
                 vec3(i0.z, i1.z, i2.z)
                 );

    return outMatrix;
}

highp mat2 transpose(in highp mat2 inMatrix) 
{
    highp vec2 i0 = inMatrix[0];
    highp vec2 i1 = inMatrix[1];

    highp mat2 outMatrix = mat2(
                 vec2(i0.x, i1.x),
                 vec2(i0.y, i1.y)
                 );

    return outMatrix;
}
#endif


#ifndef ALPHA_DISCARD_VALUE
#if NO_DISCARD != 1
uniform lowp float fAlphaDiscardValue;
#define ALPHA_DISCARD_VALUE fAlphaDiscardValue
#endif
#endif

#if SHADER_TYPE == 2
void AlphaDiscard(float fAlphaValue)
{
	#if NO_DISCARD != 1
	if(ALPHA_DISCARD_VALUE >= 0.0 && fAlphaValue <= ALPHA_DISCARD_VALUE) 
	{
		discard;
	}
	#endif
}
#endif

//=============================================================================
//
// Functions for determing color brightness and luma. Should be in gamma space.
//
//=============================================================================


float ColorToBrightness(vec3 Color)
{
    return dot(Color, vec3(0.3333333, 0.3333333, 0.3333333));    
}

float ColorToBrightness(vec4 Color)
{
    return ColorToBrightness(Color.rgb);
}

float ColorToLuma(vec3 Color)
{
    return dot(Color.rgb, vec3(0.299, 0.587, 0.114));
}

float ColorToLuma(vec4 Color)
{
    return ColorToLuma(Color.rgb); 
}

//=============================================================================
//
// Functions for converting to linear color space and back.
//
//=============================================================================

float ApplyColorSpace(float fColor)
{
	#if GAMMA_CORRECTION == 1
        return sign(fColor) * pow(abs(fColor), 2.2);
	#else
        return fColor;
	#endif
}


float RevertColorSpace(float fColor)
{
	#if GAMMA_CORRECTION == 1
        return sign(fColor) * pow(abs(fColor), 0.45454545); // 1.0/2.2
	#else
        return fColor;
	#endif
}

vec3 ApplyColorSpace(vec3 Color)
{
	#if GAMMA_CORRECTION == 1
        return sign(Color) * pow(abs(Color), vec3(2.2));
	#else
        return Color;
	#endif
}

vec3 RevertColorSpace(vec3 Color)
{
	#if GAMMA_CORRECTION == 1
        return sign(Color) * pow(abs(Color), vec3(0.45454545)); // 1.0/2.2
	#else
        return Color;
    #endif
}

vec4 ApplyColorSpace(vec4 Color)
{
    return vec4(ApplyColorSpace(Color.rgb), Color.a);
}

vec4 RevertColorSpace(vec4 Color)
{
    return vec4(RevertColorSpace(Color.rgb), Color.a);
}

///////////////////////////////////
//     
// END INC_COMMON
//
///////////////////////////////////

#endif 
