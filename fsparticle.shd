//=============================================================================
//
// fsparticle.shd
//
//=============================================================================

#define SHADER_TYPE 2

#define LIGHTING 0
#define FOG 1
#define KEYHOLING 0

#define NORMAL_MAP 0
#define SPECULAR_MAP 0
#define ROUGHNESS_MAP 0
#define HEIGHT_MAP 0
#define SELF_ILLUMINATION_MAP 0
#define ENVIRONMENT_MAP 0

#define VERTEX_COLOR 1
#define POSITION_VIEW 1
#include "inc_standard"

#define SOFT_PARTICLES_RANGE 0.2

#define BLEND_MODE_NORMAL 0
#define BLEND_MODE_ADDITIVE 1
#define BLEND_MODE_PUNCHTHROUGH 2
uniform int blendMode;
uniform float particleSizeMax;

void main ()
{
    FragmentColor = VertexColor * texture2D(texUnit0,vVertexTexCoords.xy); 
	
	AlphaDiscard(FragmentColor.a);

	#if SHADER_QUALITY_MODE > 0

		#ifndef MOBILE
			const float fSoftParticleMod = 1.0 / SOFT_PARTICLES_RANGE;
			FragmentColor.a *= sqr(clamp((GetDepth(vec2(float(gl_FragCoord.x) * invScreenWidth, float(gl_FragCoord.y) * invScreenHeight)) + vPosView.z) * fSoftParticleMod / clamp(particleSizeMax, 0.01, 1.0), 0.0, 1.0));
		#endif

		if(blendMode == BLEND_MODE_ADDITIVE)
		{
			FragmentColor.a *= 1.0 - GetFogAlpha(fFogFragCoord);
		}
		else
		{
			ApplyFog(FragmentColor);
		}
		
		#if GAMMA_CORRECTION == 1
			#if COLOR_CORRECTION_TYPE == 1
			FragmentColor.rgb = ColorClamp(FragmentColor.rgb);
			#elif COLOR_CORRECTION_TYPE == 2
			FragmentColor.rgb = ACESFilm(FragmentColor.rgb);
			#endif
		#endif    
	
	#endif
	
    gl_FragColor = FragmentColor;
}
