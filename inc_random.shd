//=============================================================================
//
// inc_random.shd
//
//=============================================================================

#ifndef INC_RANDOM
#define INC_RANDOM
#include "inc_common"
///////////////////////////////////
//
// BEGIN INC_RANDOM
//
///////////////////////////////////


uniform lowp int texNoiseBound;
uniform sampler2D texUnitNoise;

//=============================================================================
//
// Functions and arrays for generating randomization.
//
//=============================================================================

float Random(vec2 vCoords)
{
    return fract(sin(dot(vCoords, vec2(12.9898, 78.233))) * 43758.5453);
}

float Random(vec3 vCoords)
{
    return fract(sin(dot(vCoords, vec3(12.9898, 78.233, 10.1523))) * 43758.5453);
}

float InterleavedGradientNoise(vec2 vPos)
{
	vec3 vRandom = vec3 (0.06711056, 0.00583715, 52.9829189);
	return fract(vRandom.z * fract(dot(vPos, vRandom.xy)));
}

// Description : Array and textureless GLSL 3D simplex noise function.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : ijm

// Copyright (C) 2011 by Ashima Arts (Simplex noise)

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

vec4 permute(vec4 x)
{
	return mod((x*34.0+1.0)*x, 289.0);
}

// Perlin simplex noise
float NoiseSimplex3D(vec3 v)
{ 
	//const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
	const vec2  C = vec2(0.16666667, 0.33333333) ;
	const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

	// First corner
	vec3 i  = floor(v + dot(v, C.yyy) );
	vec3 x0 =   v - i + dot(i, C.xxx) ;

	// Other corners
	vec3 g = step(x0.yzx, x0.xyz);
	vec3 l = 1.0 - g;
	vec3 i1 = min( g.xyz, l.zxy );
	vec3 i2 = max( g.xyz, l.zxy );

	//  x0 = x0 - 0. + 0.0 * C 
	vec3 x1 = x0 - i1 + 1.0 * C.xxx;
	vec3 x2 = x0 - i2 + 2.0 * C.xxx;
	vec3 x3 = x0 - 1. + 3.0 * C.xxx;

	// Permutations
	i = mod(i, 289.0 ); 
	vec4 p = permute( permute( permute( 
			 i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
		   + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
		   + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

	// Gradients
	// ( N*N points uniformly over a square, mapped onto an octahedron.)
	const float n_ = 1.0/7.0; // N=7
	vec3 ns = n_ * D.wyz - D.xzx;

	vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)

	vec4 x_ = floor(j * ns.z);
	vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

	vec4 x = x_ *ns.x + ns.yyyy;
	vec4 y = y_ *ns.x + ns.yyyy;
	vec4 h = 1.0 - abs(x) - abs(y);

	vec4 b0 = vec4( x.xy, y.xy );
	vec4 b1 = vec4( x.zw, y.zw );

	//vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
	//vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
	vec4 s0 = floor(b0)*2.0 + 1.0;
	vec4 s1 = floor(b1)*2.0 + 1.0;
	vec4 sh = -step(h, vec4(0.0, 0.0, 0.0, 0.0));

	vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
	vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

	vec3 p0 = vec3(a0.xy,h.x);
	vec3 p1 = vec3(a0.zw,h.y);
	vec3 p2 = vec3(a1.xy,h.z);
	vec3 p3 = vec3(a1.zw,h.w);

	//Normalise gradients
	vec4 norm = inversesqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
	p0 *= norm.x;
	p1 *= norm.y;
	p2 *= norm.z;
	p3 *= norm.w;

	// Mix final noise value
	vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
	m = m * m;
	return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
								dot(p2,x2), dot(p3,x3) ) );
}

vec3 permute(vec3 x) 
{
	return mod(((x*34.0)+1.0)*x, 289.0);
}

// Perlin simplex noise
float NoiseSimplex2D(vec2 v)
{
	const vec4 C = vec4(0.211324865405187, 0.366025403784439,
					 -0.577350269189626, 0.024390243902439);
	vec2 i  = floor(v + dot(v, C.yy) );
	vec2 x0 = v -   i + dot(i, C.xx);
	vec2 i1;
	i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
	//  i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0
	//  i1.y = 1.0 - i1.x;
	vec4 x12 = x0.xyxy + C.xxzz;
	x12.xy -= i1;
	i = mod(i, 289.0);
	vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
	+ i.x + vec3(0.0, i1.x, 1.0 ));
	vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),
	dot(x12.zw,x12.zw)), 0.0);
	m = m*m ;
	m = m*m ;
	vec3 x = 2.0 * fract(p * C.www) - 1.0;
	vec3 h = abs(x) - 0.5;
	vec3 ox = floor(x + 0.5);
	vec3 a0 = x - ox;
	m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );
	vec3 g;
	g.x  = a0.x  * x0.x  + h.x  * x0.y;
	g.yz = a0.yz * x12.xz + h.yz * x12.yw;
	return 130.0 * dot(m, g);
}

/*
const vec2 VogelSpiral20 [20] = vec2[](
	vec2(0.15811388,0.0000000),
	vec2(-0.20194359,0.18498321),
	vec2(0.030935562,-0.35219738),
	vec2(0.25449161,0.33201509),
	vec2(-0.46707846,-0.082690453),
	vec2(0.44252075,-0.28138121),
	vec2(-0.14811868,0.55050963),
	vec2(-0.28210687,-0.54352159),
	vec2(0.61229675,0.22381395),
	vec2(-0.63714820,0.26275877),
	vec2(0.30734689,-0.65615386),
	vec2(0.22665056,0.72362250),
	vec2(-0.68383455,-0.39669927),
	vec2(0.80250526,-0.17602642),
	vec2(-0.49006357,0.69630288),
	vec2(-0.11265166,-0.87310343),
	vec2(0.69418245,0.58575655),
	vec2(-0.93463953,0.038065057),
	vec2(0.68217917,-0.67796134),
	vec2(-0.046299498,0.98633481)
	);
*/

///////////////////////////////////
//     
// END INC_RANDOM
//
///////////////////////////////////

#endif 
